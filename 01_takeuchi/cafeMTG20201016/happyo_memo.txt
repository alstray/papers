** 発表メモ

*** p4
    CAFE問題のインスタンスを，例を用いて説明していきます．
    CAFE問題のインスタンスは，プロダクト〜
    装備タイプとは，エンジンやトランスミッションなどの装備の種類を表し，
    可変性モデルでは三角形のノードで表します．
    装備オプションとは，各タイプに属する具体的な装備名のことで，
    四角形のノードで表します．
    この例は，6個の装備タイプと19個の装備オプションから構成されており，
    各タイプで選択可能なオプションの数は，すべてちょうど1個としています．
    また，各オプションの数字はIWR値と呼ばれ，直観的にはその重量を意味します．
    装備仕様ごとにIWR値の和を求め，その値と企業から提供していただいたテーブルを
    もとに，燃費と予想販売台数を算出することができます．
    
    この例には5個の依存制約が存在し，例えば，グレードのSTDはタイヤの
    16インチを要求し，エンジンのV4はトランスミッションの10ATを排他しています．
    また，装備タイプには必須かどうかの別があり，必須のタイプはノードが実線で，
    必須でないタイプは点線で表しています．この例ではサンルーフ以外は必須タイプです．

    CAFE問題では，同時に複数の車種の装備仕様を求め，
    それぞれのIWR値の和をもとに平均燃費と合計の販売台数を計算します．
    この例を用いて，STD，DX，LXグレードの3車種を生産するとどうなるか，
    次のスライドで示します．

*** p5
    CAFE基準値を9.0とした場合の解がこちらです．
    CAFE問題の解とは車種ごとの装備仕様のことで，例えば車種1の装備仕様は，
    グレードは〜〜〜〜となっています．
    そして，車種ごとに各オプションに定められたIWR値の和を計算し，
    燃費と予想販売台数との関係を表すテーブルを用いることで，
    各車種ごとに燃費と予想販売台数が求まります．
    ・
    ・
    ・
    また，この解は予想販売台数を最大化した場合の解であり
    予想販売台数の合計は3904台となっていますが，オプションの選択を誤ると，
    制約を満たしていても，予想販売台数は最悪で1156台まで大幅に減少します．
    
    
    
*** p6
    CAFE基準値を8.5にした場合の解はこのようになります．
    赤字で示されたオプションが，基準値9.0の時と比較して変化したオプションであり，
    CAFE基準値を変えると選択するオプションが大きく変化します．
    この例では車種1から3のGradeをそれぞれSTD，DX,LXと固定しており，
    一部のオプションは依存制約によって固定されるため，実際に変更可能な10個の
    オプションのうち，〜

*** p7
    次に，解集合プログラミング〜〜

*** p8
    研究目的についてです．
    本研究の目的は，〜〜〜

*** p9
    次に，本発表で提案するCAFE問題ソルバーの構成を説明します．
    CAFE問題ソルバーでは，まず与えられたインスタンスをASPのファクト形式に
    変換したのち，CAFE問題を解くためのASP符号化と結合した上で
    高速ASPシステムを用いて解を求めます．
    ASP符号化としては3種類考案し，一つ目の基本符号化で，〜
    二つ目の改良符号化です．ASPシステムは〜
    3つ目の拡張符号化は，〜
    本発表では主に基本符号化と改良符号化について説明していきます．

*** p10
    続いてASPの構文について説明します．
    
*** p11
    また，ASPには組合せ最適化問題を解くための便利な拡張構文が用意されており，
    そのうちのいくつかをここで紹介します．
    選択子はこのように記述することで，アトム集合〜
    個数制約は，選択子の前後を項lb,ubで挟むことで，〜
    重み付き個数制約は以下のように記述し，アトムa1,anに重みw1,wnを定め，〜
    そのほかにも，最小化関数や最大化関数などが用意されています．

*** p12
    次に，CAFE問題のASPファクト表現について説明します．
    このスライドでは，先程の可変性モデルで表したCAFE問題の例を
    ASPのファクトで表現しています．
    装備タイプはファクトvp_defで，装備オプションはファクトv_defで
    定義されており，例えば2行目のv_defは，オプション2WDはドライブタイプに
    属し，IWR値は125であることを意味します．
    要求制約はrequire_v_vで，排他制約はexclude_v_vで表しており，
    例えばrequire_v_v(STD,16_inch)は，オプションSTDが
    オプション16インチタイヤを要求することを意味します．
    また，必須タイプはファクトrequire_vpで表しており，サンルーフ以外の
    タイプは必須であることがわかります．
    求める車種の数はファクトgroupで表し，ここでは3車種求めることとしています．

*** p13
    ここから，基本符号化ではCAFE問題の各制約がどのように
    記述されているのか説明します．
    まずは範囲制約です．範囲制約とは，各タイプに属するオプションのうち
    装備できる個数を制限する制約で，ここではちょうど1つを装備しなければならない
    としています．これは2つのルールで表現でき，ルール1では，〜
    ルール2では，〜

*** p14
    続いて燃費制約と目的関数についてです．
    CAFE方式に基づく燃費制約はルール3からルール6で表現され，
    ルール3のiwr〜
    ルール4と5のfe〜〜〜〜であることを表します．
    このfe_mapとsv_mapは，企業から提供していただいたIWR値と燃費，
    IWR値と予想販売台数の関係を表すテーブルをASPのファクトで表現したものです．
    ルール6では，CAFE〜
    目的関数である予想販売台数の最大化はルール7で表現されます．

*** p15
    ただし，この基本符号化には問題点があります，
    ルール3で，IWR値の総和を表す項の上下限はこの式のようになり，
    下限は一つもオプションを装備しない場合の0，
    上限はすべてのオプションを装備した場合の和となってしまいます．
    しかし，これは自明な上下限であり，〜
    その結果，Sのドメインの範囲をこのような式で表すことができます．
    この式で，VPは〜〜〜〜を表しており，
    下限は，各必須タイプで，IWR値が最小であるオプションのみを装備した場合の
    総和を，上限は，すべてのタイプで，IWR値が最大であるオプションを
    装備した場合の総和を意味します．
    
*** p16
    このIWR値の上下限の式を実現したものが改良符号化です．
    改良符号化では基本符号化に対してルール3を書き換え，
    ルール10から13を追加しています．
    ルール10,11では〜
    ルール12,13では〜
    この上下限を〜

*** p17
    続いて，拡張符号化についての説明です．
    拡張符号化では，製造ラインの削減や，大量生産を促進することを狙いとして，
    予想販売台数の最大化に加えて，オプション数の最小化も可能なように拡張されています．
    拡張符号化は，改良符号化の目的関数であるルール7を7’に書き換え，
    ルール14,15を加えています．
    ルール14のアトムused_v(V)は〜
    
*** p18
    拡張符号化の効果を確認するために，最適解の全列挙を行いました．
    この表は，CAFE基準値を8.5として改良符号化を用いて販売台数が最大となるすべての解を
    求めたもので，予想販売台数が5525台である最適解が3つ存在することがわかりました．
    そこで，拡張符号化を用いて同じ問題を解くと，最適解はオプション数が最も小さい解3の
    ただひとつだけとなりました．
    このように，拡張符号化では複数の最適解に対して優劣をつけることが可能となります．
    
*** p19
    次に，実行実験についてです．
    提案手法の〜〜〜
    各ベンチマーク問題の装備タイプ，装備オプション，依存制約の数は表の通りです．
    問題mediumは実用規模の問題で，現実の問題に近い構成となっており，
    問題bigは，それを大きく上回る規模の問題です．

*** p20
    実験結果を示します．
    この表は左から〜〜〜〜を示しています．
    米印のついている値は，最適値であることを表し，赤字の値は二つの符号化の間で
    より良い予想販売台数であることを意味します．
    UNSATとは制約を満たす実行可能解が存在しないことを表し，
    ハイフンは制限時間内に実行可能解を一つも求めることが出来なかったことを表します．

*** p21

*** p22
    次に，CAFE問題ソルバーがさらにスケールの大きい問題にも
    対応できるのか確認するために，車種の数を増やした実験を行いました．
    車種の数は3，6，12の3通りとし，制限時間は1時間として，基本符号化，
    改良符号化を用いて解を求めました．
    結果のOPTとは，最適解が求めることができたことを，
    SATは実行可能解は得られましたが，最適解までには至らなかったことを，
    UNSATは制約を満たす解が存在しないことを表します．
