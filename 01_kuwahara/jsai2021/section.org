* JSAI2021 原稿案

** TODO
- 2,3,4,5章の内容を考える．簡単に箇条書きで．できれば，1/12の個別ゼミまでに．
- 参考文献の BibTeX ファイルを整理
- 2,3,4,5章を完成させる．
- 最後に1,6章を書く．

** タイトル
解集合プログラミングに基づく系統的探索と確率的局所探索の統合的手法に関する一考察

** 章立て (添削版)

1. はじめに
本発表では，SAT の発展形の一つである解集合プログラミング (Answer Set
Programming; ASP) 技術を用い，組合せ最適化問題に対して系統的探索と確率
的局所探索を統合的に適用する手法を提案する．

提案手法は，近似解法の一種である巨大近傍探索 (Large Neighborhood
Search; LNS) のアイデアをベースにしている．LNS は解に含まれる変数の値
割当ての一部をランダムに選んで取り消し，その変数のみに対して再割当てを
行うことで解を再構築する反復解法である．提案手法では，解の再構築の操作
を，値割当てをなるべく維持したままでの再探索に置き換えることで，取り消
されなかった変数への再割当てを許す．これによって，どの値割当てを取り消
すかに依存しすぎない探索を行うことができる．

提案手法を ASP ソルバー clingo 上に実装し，国際時間割競技会の問題集(全
21問)を用いて性能評価を行った．その結果，提案手法は，通常の ASP 解法と
比較して，多くの問題に対してより良い解を得ることができた．また，1問に
ついて，既知の最良値を更新することに成功した．

2. 巨大近傍探索
 - LNS の概要
   ・近似解法の一種
   ・確率的局所探索
 - LNS のアルゴリズム
　　  LNSでは，取り消された変数に対してのみ再割当てが行われ，他の変数の値は変化しない．
　　　値割当てをなるべく維持したままでの再探索で解の再構築の操作を
　　　置き換えることにより，取り消されなかった変数への再割当てを許す．
　　　解の再構築の操作を，
　　　値割当てをなるべく維持したままでの再探索に置き換えることで，
　　　取り消されなかった変数への再割当てを許す．
　　　ASPでは，解の再構築は系統的探索で行うことができる．
　　　系統的探索の場合，再構築で値割り当てを固定する必要はない．
　　　ASPシステムは学習節を保持するので，再探索のコストが小さい．
　　　どの割当てに対してdestroyを行うかに依存しすぎない探索を行える．
　　　値割当てをなるべく維持したままでの再探索が自然に実現できる．

3. 優先度付き巨大近傍探索
 - LNPS の概要
   ・ASP 技術を用いる
   ・組合せ最適化問題に対し適用
   ・系統的探索と確率的局所探索を統合
 - LNPS のアルゴリズム
   ・解の再構築を，値割当てをなるべく維持したままでの再探索に置き換える
   ・取り消されなかった変数への再割当てを許す
   ・適切な destroy 演算が重要 

4. ASP ソルバー clingo 上での実装
 - ASP の説明
   ・#heuristic宣言など
 - 実装方法
   ・clingoのPython APIについて
 - 実装した destroy 演算
   ・random N
   ・day-period
   ・day-room
   ・swap N
   ・(さらに追加できれば）

5. 評価実験
 - 実験概要
   ・ベンチマーク
   ・実験対象（実装した destroy 演算)
    ・random N
    ・day-period
    ・day-room
    ・swap N
    ・(さらに追加できれば）
   ・各種パラメータ
 - 実験結果
   ・（余裕があれば目的関数値，既知の最良値に対する比の両方）
   ・なければ目的関数値のみ
     ・これのみの場合は既知の最良値も合わせて載せる

6. おわりに

参考文献

** 章立て (オリジナル版)
*** イントロダクション 0.5p
 - 系統的探索
 - 局所的探索
 - ASPについて
 - LNPSについて
   - ASPに基づいて系統的探索と局所的探索を統合した手法という位置付け
 - 研究目的
 - 今回対象とする問題について（CB-CTT）
 - 提案解法
   - destroy 演算
 - 実行実験概要および結果
*** ASP ~0.5p
 - ASPについて出来るだけ簡潔に
   - #heuristicは触れておく
*** LNPS 1p
 - (余裕があればLNS）
 - LNPSについての説明
   - アルゴリズム
   - 適切なdestoryが重要であること
 - ASPによるLNPS実装の概要
   - 余裕があれば図解
*** 提案するdestroy演算 ~1p
 - CB-CTTについて触れる
   - destroy演算に関係するがどこで説明すべきか？
   - 説明内容は最低限
     - 定式化
 - destroy演算について
   - random N
   - day-period
   - day-room
   - swap N
   - (さらに追加できれば）

*** 実験 0.5p~
 - 実験概要
   - ベンチマーク
   - 実験対象（符号化等）
   - 各種パラメータ
 - 実験結果
   - （余裕があれば目的関数値，既知の最良値に対する比の両方）
   - なければ目的関数値のみ
     - これのみの場合は既知の最良値も合わせて載せる

*** まとめ ~0.5p
 - 実験結果のまとめ
 - 今後の展望・課題
